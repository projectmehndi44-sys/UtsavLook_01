
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an authenticated admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/teamMembers/$(userId)) &&
             get(/databases/$(database)/documents/teamMembers/$(userId)).data.role == 'Super Admin';
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Customers can only read/write their own data
    match /customers/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if request.auth.uid != null;
    }

    // Artists can be read by anyone, but only written by themselves or an admin
    match /artists/{artistId} {
      allow read: if true;
      allow write: if isOwner(artistId) || isAdmin(request.auth.uid);
    }
    
    // Pending artists can be created by anyone, but only read/deleted by an admin
    match /pendingArtists/{docId} {
        allow create: if true;
        allow read, delete: if isAdmin(request.auth.uid);
    }

    // Bookings can be read by the customer or an admin.
    // They can only be created by an authenticated user.
    // Updates can be done by customer, assigned artist, or admin.
    match /bookings/{bookingId} {
      allow read: if resource.data.customerId == request.auth.uid || 
                     request.auth.uid in resource.data.artistIds ||
                     isAdmin(request.auth.uid);
      allow create: if request.auth.uid != null && request.resource.data.customerId == request.auth.uid;
      allow update: if resource.data.customerId == request.auth.uid || 
                       request.auth.uid in resource.data.artistIds ||
                       isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Notifications are private to the assigned artist/admin
    match /notifications/{notificationId} {
        allow read, write: if resource.data.artistId == request.auth.uid;
    }

    // Team members can only be managed by Super Admins
    match /teamMembers/{memberId} {
        allow read: if isAdmin(request.auth.uid);
        allow write: if isAdmin(request.auth.uid);
    }
    
    // Payout history is admin-only
    match /payoutHistory/{payoutId} {
        allow read: if isAdmin(request.auth.uid);
        allow create: if isAdmin(request.auth.uid);
    }

    // Configuration documents can only be read by anyone, but only written by admins.
    match /config/{configId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
  }
}
