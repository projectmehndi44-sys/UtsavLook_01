rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/config/teamMembers) && 
             (request.auth.uid in get(/databases/$(database)/documents/config/teamMembers).data.members);
    }

    // --- Publicly Readable Collections ---
    
    match /artists/{artistId} {
      allow read: if true;
      allow create, update: if isOwner(artistId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    match /masterServices/{serviceId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    // --- Configuration ---
    
    // Special rule for teamMembers to allow one-time setup
    match /config/teamMembers {
      allow read: if true;
      // Allow creation only if the document does not exist yet.
      allow create: if !exists(/databases/$(database)/documents/config/teamMembers);
      // Allow updates only by existing admins.
      allow update: if isAdmin();
      allow delete: if false; // Never allow deletion of this document
    }

    // Rules for all other config documents
    match /config/{docId} {
      // Exclude teamMembers since it has its own rule
      allow read: if docId != 'teamMembers' && 
                    (docId == 'availableLocations' || 
                     docId == 'companyProfile' ||
                     docId == 'placeholderImages' ||
                     docId == 'benefitImages' ||
                     docId == 'promotionalImage' ||
                     docId == 'heroSettings' ||
                     (isSignedIn() && docId == 'financialSettings'));

      allow write: if docId != 'teamMembers' && isAdmin();
    }
    
    // --- User-Specific & Business Logic Collections ---
    
    match /customers/{userId} {
      allow get, update: if isOwner(userId);
      allow create: if isSignedIn();
      allow list, delete: if isAdmin();
    }
    
    match /bookings/{bookingId} {
      allow create: if isSignedIn() && request.resource.data.customerId == request.auth.uid;
      allow read, update: if (isOwner(resource.data.customerId)) ||
                             (isSignedIn() && request.auth.uid in resource.data.artistIds) || 
                             isAdmin();
      allow list, delete: if isAdmin();
    }
    
    match /pendingArtists/{pendingId} {
      allow create: if true;
      allow read, list, delete: if isAdmin();
    }

    match /notifications/{notificationId} {
       allow read: if (isOwner(resource.data.artistId) || isOwner(resource.data.customerId)) || isAdmin();
       allow list, write: if isAdmin();
    }
    
    match /payoutHistory/{payoutId} {
      allow read, list, write: if isAdmin();
    }
  }
}
