
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check if the user's UID exists in the team members config document
      return isSignedIn() && exists(/databases/$(database)/documents/config/teamMembers) &&
             get(/databases/$(database)/documents/config/teamMembers).data.members[request.auth.uid] != null;
    }

    // --- Collection-level Rules ---

    // Artists: Anyone can read and list artists. Only the artist or an admin can update.
    match /artists/{artistId} {
      allow get, list: true;
      allow create, update: if isOwner(artistId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Master Services: These are public and can be read by anyone.
    match /masterServices/{serviceId} {
        allow get, list: true;
        allow create, update, delete: if isAdmin();
    }

    // Customers: A user can only access their own data. Admins have broader access.
    match /customers/{userId} {
      allow get, update: if isOwner(userId);
      allow create: if isSignedIn();
      allow list, delete: if isAdmin();
    }
    
    // Bookings: Complex rules based on role (customer, artist, admin).
    match /bookings/{bookingId} {
      allow create: if isSignedIn() && request.resource.data.customerId == request.auth.uid;
      allow read: if (isOwner(resource.data.customerId)) || 
                     (isSignedIn() && request.auth.uid in resource.data.artistIds) || 
                     isAdmin();
      allow update: if (isOwner(resource.data.customerId)) || 
                       (isSignedIn() && request.auth.uid in resource.data.artistIds) || 
                       isAdmin();
      allow list: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Pending Artists: Anyone can submit, only admins can read/process.
    match /pendingArtists/{pendingId} {
      allow create: true;
      allow read, list, delete: if isAdmin();
    }

    // Notifications: Only the recipient (customer/artist) or an admin can read.
    match /notifications/{notificationId} {
       allow read: if (isOwner(resource.data.artistId) || isOwner(resource.data.customerId)) || isAdmin();
       allow list, write: if isAdmin();
    }
    
    // Payout History: Admin-only access.
    match /payoutHistory/{payoutId} {
      allow read, list, write: if isAdmin();
    }

    // --- Configuration Document ---
    // All config documents are under a single collection.
    // Public configs can be read by anyone, but only written by admins.
    match /config/{docId} {
      allow read: true;
      allow write: if isAdmin();
    }

    // Default Deny: Ensure any path not explicitly matched is denied.
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
