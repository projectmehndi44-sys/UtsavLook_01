rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for Super Admin role
    function isSuperAdmin(userId) {
      return exists(/databases/$(database)/documents/teamMembers/$(userId)) &&
             get(/databases/$(database)/documents/teamMembers/$(userId)).data.role == 'Super Admin';
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Config collection: public read, admin write
    match /config/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin(request.auth.uid);
    }
    
    // Artists: public read, only the artist or an admin can edit
    match /artists/{artistId} {
      allow read: if true;
      allow write: if request.auth.uid == artistId || isSuperAdmin(request.auth.uid);
    }
    
    // Pending Artists: only admins can manage
    match /pendingArtists/{docId} {
        allow read, write, delete: if isSuperAdmin(request.auth.uid);
    }
    
    // Team Members: only admins can manage
    match /teamMembers/{docId} {
        allow read, write: if isSuperAdmin(request.auth.uid);
        // Prevent deleting super admin
        allow delete: if isSuperAdmin(request.auth.uid) && resource.data.role != 'Super Admin';
    }

    // Customers: The customer owning the doc or an admin can read/write.
    match /customers/{customerId} {
      allow read, write: if request.auth.uid == customerId || isSuperAdmin(request.auth.uid);
    }
    
    // Notifications: Only the recipient or an admin can read. Creation is handled by Cloud Functions.
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.artistId || request.auth.uid == resource.data.customerId || isSuperAdmin(request.auth.uid);
        allow create: if isSuperAdmin(request.auth.uid); // Only admins can create general notifications
    }

    // Bookings:
    // Creation is handled by a Cloud Function.
    // Reading is allowed by the customer, assigned artists, or an admin.
    // Updating is complex and mostly handled by Cloud Functions, but some status changes are allowed.
    match /bookings/{bookingId} {
        allow read: if request.auth.uid == resource.data.customerId 
                      || request.auth.uid in resource.data.artistIds
                      || isSuperAdmin(request.auth.uid);
                      
        allow update: if isSuperAdmin(request.auth.uid); // Admins can update anything
        
        // Allow customer to update specific fields for cancellation (this is a simplified rule, real logic is in the function)
        allow update: if request.auth.uid == resource.data.customerId && request.resource.data.status == 'Cancelled';
        
        // Allow artist to update specific fields for completion
        allow update: if request.auth.uid in resource.data.artistIds && request.resource.data.status == 'Completed';
    }
    
     // Payout History: Admin-only access
    match /payoutHistory/{payoutId} {
      allow read, write: if isSuperAdmin(request.auth.uid);
    }
  }
}
