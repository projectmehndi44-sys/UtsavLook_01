rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles and ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // This function now correctly checks if the user's ID is in the list of team members.
    function isTeamMember() {
      return request.auth.uid in get(/databases/$(database)/documents/config/teamMembers).data.members.map(m => m.id);
    }
    
    // This function now correctly filters members to check for a specific role.
    function isRole(role) {
      return exists(/databases/$(database)/documents/config/teamMembers) &&
             get(/databases/$(database)/documents/config/teamMembers).data.members
               .filter(m => m.id == request.auth.uid && m.role == role)
               .size() > 0;
    }

    // Publicly readable collections for the website to function
    match /artists/{artistId} {
      allow read: if true;
      allow write: if isTeamMember(); // Only team members can edit artists
    }
    
    // CUSTOMERS: Can only manage their own data.
    match /customers/{userId} {
      allow read, write: if isOwner(userId);
    }

    // BOOKINGS: Multiple roles can interact with bookings.
    match /bookings/{bookingId} {
      allow read: if isTeamMember() || isOwner(resource.data.customerId) || request.auth.uid in resource.data.artistIds;
      allow create: if isOwner(request.resource.data.customerId);
      allow update: if isTeamMember() || (request.auth.uid in resource.data.artistIds && request.resource.data.status == 'Completed');
    }

    // PENDING ARTISTS: Open for creation, restricted for management.
    match /pendingArtists/{pendingId} {
      allow create: if true;
      allow read, delete: if isRole('Super Admin');
    }
    
    // CONFIGURATION: Admin-only section with specific exceptions.

    // This is the crucial fix: Any authenticated user can read the team list to verify their role upon login.
    match /config/teamMembers {
      allow read: if request.auth != null;
      allow write: if isRole('Super Admin'); // But only Super Admins can change it
    }

    // Other configuration files are publicly readable but only writable by Super Admins.
    match /config/{document} {
      allow read: if true;
      allow write: if isRole('Super Admin');
    }
  }
}
