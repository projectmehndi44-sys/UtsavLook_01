
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    // Checks if the requesting user is a Super Admin.
    function isAdmin() {
      // Use the requesting user's UID to look up their profile in the teamMembers collection.
      // Then, check if their 'role' field is set to 'Super Admin'.
      return request.auth != null && get(/databases/$(database)/documents/teamMembers/$(request.auth.uid)).data.role == 'Super Admin';
    }

    // Checks if the requesting user is the owner of a document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- Collection Rules ---

    // Artists can be read by anyone, but only edited by the artist themselves or an admin.
    match /artists/{artistId} {
      allow read: if true;
      allow write: if isOwner(artistId) || isAdmin();
    }

    // Customers can only be accessed by themselves or an admin.
    match /customers/{customerId} {
      allow read, write: if isOwner(customerId) || isAdmin();
    }
    
    // Notifications can only be read by the assigned artist/admin or an admin.
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.artistId) || isAdmin();
      allow write: if isAdmin(); // Only admins can create/update notifications directly.
    }

    // Bookings can be created by any authenticated user, but only read/updated by the involved parties or an admin.
    // Booking creation is handled by a secure Cloud Function, so this rule is a fallback.
    match /bookings/{bookingId} {
      allow create: if request.auth != null;
      allow read, update: if isOwner(resource.data.customerId) || request.auth.uid in resource.data.artistIds || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Pending artist applications can be created by anyone, but only managed by admins.
    match /pendingArtists/{docId} {
        allow create: if true;
        allow read, write, delete: if isAdmin();
    }
    
    // The entire 'payoutHistory' collection is only accessible by admins.
    match /payoutHistory/{payoutId} {
      allow read, write: if isAdmin();
    }

    // Team member profiles can only be managed by other Super Admins.
    match /teamMembers/{memberId} {
        allow read, write: if isAdmin();
    }
    
    // Configuration documents can be read by anyone, but only written to by admins.
    // This is the rule that fixes the error.
    match /config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
