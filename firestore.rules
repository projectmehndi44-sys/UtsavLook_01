rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/teamMembers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/teamMembers/$(request.auth.uid)).data.role == 'Super Admin';
    }

    // --- Collection Rules ---

    // Artists, Master Services, and Config should be publicly readable
    match /artists/{artistId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /config/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /pendingArtists/{docId} {
        allow read, write: if isAdmin(); // Only admins can see/manage pending
        allow create: if true; // Anyone can submit an application
    }

    // Customers can only access their own document
    match /customers/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create, delete: if isAdmin(); // Only admins can create/delete customer docs directly
    }

    // Bookings are private to the customer or assigned artist, but admins have full access.
    match /bookings/{bookingId} {
      allow read: if isAdmin() || 
                   (request.auth != null && resource.data.customerId == request.auth.uid) ||
                   (request.auth != null && request.auth.uid in resource.data.artistIds);
      allow create, update, delete: if isAdmin();
      // NOTE: Client-side booking creation is now disabled. It must go through the 'createBooking' Cloud Function.
    }
    
    // Notifications are private to the recipient
    match /notifications/{notificationId} {
        allow read, update: if request.auth != null && (
                                resource.data.artistId == request.auth.uid ||
                                resource.data.customerId == request.auth.uid
                            ) || isAdmin();
        allow create: if isAdmin(); // Notifications created by server/admin
    }
    
    // Payout history is admin-only
    match /payoutHistory/{payoutId} {
        allow read, write: if isAdmin();
    }

    // Team members can only be managed by admins
    match /teamMembers/{memberId} {
      allow read, write: if isAdmin();
    }
  }
}
